<!DOCTYPE html>
<html lang="sr">

<head>
  <meta charset="UTF-8" />
  <title>Korisnici</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f4f4f4;
    }

    .header {
      margin-bottom: 15px;
    }

    .filters,
    .actions {
      margin-bottom: 10px;
    }

    input[type="text"],
    select {
      padding: 5px;
      margin-right: 10px;
    }

    button {
      padding: 6px 12px;
      cursor: pointer;
    }

    .download-btn {
      background-color: lightgray;
    }

    .blue-btn {
      background-color: #4da6ff;
      color: white;
      border: none;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      background-color: white;
    }

    table th,
    table td {
      padding: 10px;
      border: 1px solid #ccc;
      text-align: left;
    }

    table th {
      background-color: #e6e6e6;
    }

    .role-btn {
      background-color: #33b5e5;
      color: white;
      border: none;
      padding: 5px 10px;
    }

    .edit-btn {
      background-color: #007acc;
      color: white;
      border: none;
      padding: 5px 10px;
    }

    .pagination {
      margin-top: 15px;
      text-align: center;
    }

    .pagination button {
      padding: 5px 10px;
      margin: 2px;
      border: 1px solid #ccc;
      background-color: white;
    }

    .pagination button.active {
      background-color: #007acc;
      color: white;
      border: none;
    }

    /* Add this for the fixed logout button positioned at top right */
    .logout-btn {
      position: fixed;
      top: 10px;
      right: 10px;
      padding: 8px 16px;
      background-color: #ff5733;
      color: white;
      border: none;
      cursor: pointer;
      z-index: 1000;
      /* Ensure it's always on top */
    }

    .logout-btn:hover {
      background-color: #ff2e00;
    }
  </style>
</head>

<body>
  <!-- Conditionally render Logout button if user is logged in -->
  <% if (user) { %>
  <button class="logout-btn" onclick="window.location.href='/logout';">
    Odjavi se
  </button>
  <% } %>

  <div class="header">
    <h2>Korisnici</h2>
  </div>

  <div class="filters">
    <input type="text" id="searchInput" placeholder="Ime/Prezime/Korisničko ime" oninput="searchUsers()" />

    <select>
      <option>Klinika - Opšta bolnica - Bor</option>
    </select>
    <button>Uloga</button>
    <button class="download-btn">⬇ Skini izveštaj</button>
  </div>

  <div class="actions">
    <button id="createUserBtn" class="blue-btn" onclick="window.location.href='/users/add-user'">
      Kreiraj korisnika
    </button>
    <button>Resetuj sortiranje</button>
    <select id="sortField" onchange="searchUsers()">
      <option value="firstName" <%= sortBy === 'firstName' ? 'selected' : '' %>>Ime</option>
      <option value="lastName" <%= sortBy === 'lastName' ? 'selected' : '' %>>Prezime</option>
      <option value="username" <%= sortBy === 'username' ? 'selected' : '' %>>Korisničko ime</option>
      <option value="lastLogin" <%= sortBy === 'lastLogin' ? 'selected' : '' %>>Poslednja prijava</option>
    </select>

    <select id="sortOrder" onchange="searchUsers()">
      <option value="asc" <%= sortOrder === 'asc' ? 'selected' : '' %>>Rastuće</option>
      <option value="desc" <%= sortOrder === 'desc' ? 'selected' : '' %>>Opadajuće</option>
    </select>
  </div>

  <table>
    <thead>
      <tr>
        <th>#</th>
        <th>Korisničko ime</th>
        <th>Ime</th>
        <th>Prezime</th>
        <th>E-mail</th>
        <th>Naziv zdravstvene ustanove</th>
        <th>Promeni lozinku</th>
        <th>Poslednja prijava-APP</th>
        <th>Uloga</th>
        <th>Uredi</th>
        <th>Validni</th>
      </tr>
    </thead>
    <tbody>
      <% users.forEach((user, index) => { %>
      <tr>
        <td>
          <%= index + 1 + (currentPage - 1) * totalUsers / totalPages %>
        </td>
        <td><%= user.username %></td>
        <td><%= user.firstName %></td>
        <td><%= user.lastName %></td>
        <td><%= user.mail %></td>
        <td><%= user.healthInstitution.name %></td>
        <td>✖</td>
        <td><%= new Date(user.lastLogin).toLocaleString() %></td>
        <td>
          <button class="role-btn" onclick="manageRoles('<%= user._id %>')">
            Uloge
          </button>
        </td>
        <td>
          <button class="edit-btn" onclick="editUser('<%= user._id %>')">
            Uredi
          </button>
        </td>
        <td>✔</td>
      </tr>
      <% }); %>
    </tbody>
  </table>

  <div class="pagination">
    <button <%= currentPage === 1 ? 'disabled' : '' %> onclick="goToPage(<%= currentPage - 1 %>)">&laquo;</button>

    <% for (let i = 1; i <= totalPages; i++) { %>
    <button class="<%= i === currentPage ? 'active' : '' %>" onclick="goToPage(<%= i %>)"><%= i %></button>
    <% } %>

    <button <%= currentPage === totalPages ? 'disabled' : '' %> onclick="goToPage(<%= currentPage + 1 %>)">&raquo;</button>
  </div>

  <script>
    let currentPage = <%= currentPage %>;

    const urlParams = new URLSearchParams(window.location.search);
    const query = urlParams.get('query');

    if (query) {
      document.getElementById('searchInput').value = query;
    }

    function searchUsers() {
      const query = document.getElementById('searchInput').value.trim();
      const sortBy = document.getElementById('sortField').value;
      const sortOrder = document.getElementById('sortOrder').value;

      // Start with URLSearchParams
      const urlParams = new URLSearchParams(window.location.search);

      // Reset to page 1 on new search
      urlParams.set('page', currentPage);
      urlParams.set('limit', 10);

      // Set or remove the query parameter
      if (query) {
        urlParams.set('query', query);
      } else {
        urlParams.delete('query');
      }

      // Update sorting parameters
      urlParams.set('sortBy', sortBy);
      urlParams.set('sortOrder', sortOrder);

      const newUrl = `/users/?${urlParams.toString()}`;

      // Update the browser history without reloading the page
      history.pushState({}, '', newUrl);

      // Optional: reset to page 1
      currentPage = 1;

      fetch(`/users/search/?query=${query}&page=${currentPage}&limit=10&sortBy=${sortBy}&sortOrder=${sortOrder}`)
        .then(response => response.json())
        .then(data => {
          const users = data.users;
          const totalPages = data.totalPages;

          renderUsers(users);
          updatePagination(totalPages);
        })
        .catch(error => console.error('Error fetching search results:', error));
    }


    function renderUsers(users) {

      const tbody = document.querySelector('table tbody');
      tbody.innerHTML = ''; // Clear the existing rows

      users.forEach((user, index) => {
        const row = document.createElement('tr');

        row.innerHTML = `
            <td>${index + 1 + (currentPage - 1) * 10}</td>
            <td>${user.username}</td>
            <td>${user.firstName}</td>
            <td>${user.lastName}</td>
            <td>${user.mail}</td>
            <td>${user.healthInstitution.name}</td>
            <td>✖</td>
            <td>${new Date(user.lastLogin).toLocaleString()}</td>
            <td><button class="role-btn" onclick="manageRoles('${user._id}')">Uloge</button></td>
            <td><button class="edit-btn" onclick="editUser('${user._id}')">Uredi</button></td>
            <td>✔</td>
          `;

        tbody.appendChild(row);
      });
    }

    function updatePagination(totalPages) {
      const pagination = document.querySelector('.pagination');
      pagination.innerHTML = ''; // Clear current pagination buttons

      const prevButton = document.createElement('button');
      prevButton.innerHTML = '&laquo;';
      prevButton.disabled = currentPage === 1;
      prevButton.onclick = () => goToPage(currentPage - 1);
      pagination.appendChild(prevButton);

      for (let i = 1; i <= totalPages; i++) {
        const pageButton = document.createElement('button');
        pageButton.innerHTML = i;
        pageButton.classList.toggle('active', i === currentPage);
        pageButton.onclick = () => goToPage(i);
        pagination.appendChild(pageButton);
      }

      const nextButton = document.createElement('button');
      nextButton.innerHTML = '&raquo;';
      nextButton.disabled = currentPage === totalPages;
      nextButton.onclick = () => goToPage(currentPage + 1);
      pagination.appendChild(nextButton);
    }

    function goToPage(page) {
      const searchQuery = document.getElementById('searchInput')?.value?.trim();
      const sortBy = document.getElementById('sortField').value;
      const sortOrder = document.getElementById('sortOrder').value;

      // Start building the URL
      let url = `/users/?page=${page}&limit=10&sortBy=${sortBy}&sortOrder=${sortOrder}`;

      // Add the search query to the URL only if it's not empty
      if (searchQuery) {
        url += `&query=${searchQuery}`;
      }

      // Redirect to the new URL
      window.location.href = url;
    }

    function editUser(userId) {
      window.location.href = `/users/edit-user/${userId}`;
    }

    function manageRoles(userId) {
      window.location.href = `/users/manage-roles/${userId}`;
    }
  </script>
</body>

</html>